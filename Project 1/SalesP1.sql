-- List all tables present in the database for initial exploration
SELECT * 
FROM INFORMATION_SCHEMA.TABLES;


-- List all columns in the [gold.dim_sales] table, helpful for understanding schema structure
SELECT * 
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = '[gold.dim_sales]';



-- Find all unique countries from the customers table, good for demographic segmentation
SELECT DISTINCT COUNTRY 
FROM [gold.dim_customers];



-- Retrieve all unique combinations of product category, subcategory, and product name for comprehensive product cataloguing
SELECT DISTINCT category, subcategory, product_name 
FROM [gold.dim_products] 
ORDER BY 1,2,3;

-- Get date range of orders in the sales fact table and calculate in years (duration of sales activity)
SELECT MIN(order_date) AS first_order, MAX(order_date) AS last_order,
DATEDIFF(year, MIN (order_date) , MAX (order_date)) AS Order_range
FROM [gold.fact_sales];


-- Identify oldest and youngest customers based on birthdate for age analysis
SELECT MIN(birthdate) AS oldest_customer, MAX(birthdate) AS youngest_customer 
FROM [gold.dim_customers];


-- Total quantity of products sold as a basic volume metric
SELECT SUM(quantity) AS total_quantity
FROM [gold.fact_sales];


-- Calculate average price of products sold for pricing insights
SELECT AVG(price) AS avg_price
FROM [gold.fact_sales];


-- Count total records/orders in the sales fact table (includes possible duplicates)
SELECT COUNT(order_number) AS total 
FROM [gold.fact_sales];


-- Count distinct order numbers to get the number of unique orders
SELECT COUNT(DISTINCT order_number) AS total 
FROM [gold.fact_sales];


-- Count all product names (may count duplicates if same product name appears multiple times)
SELECT COUNT(product_name) AS total_products
FROM [gold.dim_products];


-- Count of unique product names for accurate product variety
SELECT COUNT(DISTINCT product_name) AS total_products
FROM [gold.dim_products];


-- Count all customers in the customers dimension table
SELECT COUNT(customer_key) AS total_customer
FROM [gold.dim_customers];


-- Count distinct customers who actually placed orders
SELECT COUNT(DISTINCT customer_key) AS customer_who_ordered
FROM [gold.fact_sales];


-- Combine several key performance metrics into one result, suitable for dashboarding
SELECT 'Total Quantity' AS measure_name, SUM(quantity) AS measure_value FROM [gold.fact_sales]
UNION ALL
SELECT 'Total Sales', SUM(sales_amount) FROM [gold.fact_sales]
UNION ALL
SELECT 'Average Price', AVG(price) FROM [gold.fact_sales]
UNION ALL
SELECT 'Total Orders', COUNT(DISTINCT order_number) FROM [gold.fact_sales]
UNION ALL
SELECT 'Total Products', COUNT(product_name) FROM [gold.dim_products]
UNION ALL
SELECT 'Total Customers', COUNT(customer_key) FROM [gold.dim_customers];


-- Find total customers grouped by country to analyze customer distribution geographically
SELECT country, COUNT(customer_key) AS total_customers 
FROM [gold.dim_customers]
GROUP BY country
ORDER BY total_customers DESC;


-- Find total customers grouped by gender for demographic analysis
SELECT gender, COUNT(customer_key) AS total_customers
FROM [gold.dim_customers]
GROUP BY gender
ORDER BY total_customers DESC;


-- Count total products by category for assortment analysis
SELECT category, COUNT(product_key) AS total_products
FROM [gold.dim_products]
GROUP BY category
ORDER BY total_products DESC;


-- Calculate average cost for each product category to analyze cost structure
SELECT category, AVG(cost) AS avg_cost
FROM [gold.dim_products]
GROUP BY category
ORDER BY avg_cost DESC;


-- Compute total revenue for each product category (using a join between sales and products)
SELECT p.category, SUM(f.sales_amount) AS total_revenue
FROM [gold.fact_sales] f
LEFT JOIN [gold.dim_products] p ON p.product_key = f.product_key
GROUP BY p.category
ORDER BY total_revenue DESC;


-- Get total revenue generated by each customer (using a join between sales and customers)
SELECT c.customer_key, c.first_name, c.last_name, SUM(f.sales_amount) AS total_revenue
FROM [gold.fact_sales] f
LEFT JOIN [gold.dim_customers] c ON c.customer_key = f.customer_key
GROUP BY c.customer_key, c.first_name, c.last_name
ORDER BY total_revenue DESC;


-- Find distribution of items sold by country to understand geographic trends in sales
SELECT c.country, SUM(f.quantity) AS total_sold_items
FROM [gold.fact_sales] f
LEFT JOIN [gold.dim_customers] c ON c.customer_key = f.customer_key
GROUP BY c.country
ORDER BY total_sold_items DESC;
